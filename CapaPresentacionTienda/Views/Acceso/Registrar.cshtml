@model CapaEntidad.Cliente;
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Registrar</title>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/StylesFooter.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.11.3/font/bootstrap-icons.min.css" integrity="sha512-dPXYcDub/aeb08c63jRq/k6GaKccl256JQy/AnOq7CAnEZ9FzSL9wSbcZkMp4R26vBsMLFYH4kQ67/bbV8XaCQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />

</head>
<body >
    <div id="layoutAuthentication">
        <div id="layoutAuthentication_content">
            <main>
                <div class="container">
                    <div class="row justify-content-center">
                        <div class="col-lg-7">
                            <div class="card mt-5 rounded-lg border-0 shadow-lg">
                                <div class="card-header"><h3 class="font-weight-light my-4 text-center">Crear una cuenta</h3></div>
                                <div class="card-body">
                                    <form action="@Url.Action("Registrar","Acceso")" method="post">
                                        <div class="row mb-3">
                                            <div class="col-md-6">
                                                <div class="form-floating mb-3 mb-md-0 custom-outline-purple">                                               
                                                    @Html.TextBoxFor(m => m.Nombre, new { @class = "form-control", @placeholder = ".", @id = "txtnombre", value = ViewData["Nombre"] })
                                                    @Html.Label("txtnombre","Nombre")
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-floating custom-outline-purple">
                                                    @Html.TextBoxFor(m => m.Apellidos, new { @class = "form-control", @placeholder = ".", @id = "txtapellidos", value = ViewData["Apellidos"] })
                                                    @Html.Label("txtapellidos", "Apellidos")
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-floating mb-3 custom-outline-purple">
                                            @Html.TextBoxFor(m => m.Correo, new { @class = "form-control", @placeholder = ".", @id = "txtcorreo", value = ViewData["Correo"] })
                                            @Html.Label("txtcorreo", "Correo")
                                        </div>
                                        <div class="row mb-3">
                                            <div class="col-md-6">
                                                <div class="form-floating mb-3 mb-md-0 custom-outline-purple">
                                                    @Html.PasswordFor(m => m.Clave, new { @class = "form-control", @placeholder = ".", @id = "txtclave" })
                                                    @Html.Label("txtclave", "Contraseña")
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-floating mb-3 mb-md-0 custom-outline-purple">
                                                    @Html.PasswordFor(m => m.ConfirmarClave, new { @class = "form-control", @placeholder = ".", @id = "txtclave" })
                                                    @Html.Label("txtclave", "Confirmar Contraseña")
                                                </div>
                                            </div>
                                        </div>
                                        @{
                                            @if (ViewBag.Error != null)
                                            {
                                                <div class="form-floating mb-3 mb-md-0 custom-outline-purple">
                                                    <div class="alert alert-danger" role="alert">
                                                        @ViewBag.Error
                                                    </div>
                                                </div>
                                            }
                                        }
                                        <div class="mt-4 mb-0">
                                            <div class="d-grid"><button class="btn-block" id="btn-custom" type="submit">Crear Cuenta</button></div>
                                        </div>
                                    </form>
                                </div>
                                <div class="card-footer py-3 text-center">
                                    <div class="small"><a href="@Url.Action("Index","Acceso")">¿Ya tienes una cuenta? Iniciar Sesion</a></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
        <div id="layoutAuthentication_footer">
           
        </div>
    </div>
    <footer>
        <div class="background">
            <svg version="1.1"
                 xmlns="http://www.w3.org/2000/svg"
                 xmlns:xlink="http://www.w3.org/1999/xlink"
                 x="0px"
                 y="0px"
                 width="100%"
                 height="100%"
                 viewBox="0 0 1600 700">
                <defs>
                    <path id="wave"
                          fill="rgba(105, 27, 252, 0.6)"
                          d="M-363.852,502.589c0,0,236.988-41.997,505.475,0
  s371.981,38.998,575.971,0s293.985-39.278,505.474,5.859s493.475,48.368,716.963-4.995v560.106H-363.852V502.589z" />
                </defs>
                <g>
                    <use xlink:href="#wave" opacity=".4">
                        <animateTransform attributeName="transform"
                                          attributeType="XML"
                                          type="translate"
                                          dur="8s"
                                          calcMode="spline"
                                          values="270 230; -334 180; 270 230"
                                          keyTimes="0; .5; 1"
                                          keySplines="0.42, 0, 0.58, 1.0;0.42, 0, 0.58, 1.0"
                                          repeatCount="indefinite" />
                    </use>
                    <use xlink:href="#wave" opacity=".6">
                        <animateTransform attributeName="transform"
                                          attributeType="XML"
                                          type="translate"
                                          dur="6s"
                                          calcMode="spline"
                                          values="-270 230;243 220;-270 230"
                                          keyTimes="0; .6; 1"
                                          keySplines="0.42, 0, 0.58, 1.0;0.42, 0, 0.58, 1.0"
                                          repeatCount="indefinite" />
                    </use>
                    <use xlink:href="#wave" opacty=".9">
                        <animateTransform attributeName="transform"
                                          attributeType="XML"
                                          type="translate"
                                          dur="4s"
                                          calcMode="spline"
                                          values="0 230;-140 200;0 230"
                                          keyTimes="0; .4; 1"
                                          keySplines="0.42, 0, 0.58, 1.0;0.42, 0, 0.58, 1.0"
                                          repeatCount="indefinite" />
                    </use>
                </g>
            </svg>
        </div>

    </footer>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://kit.fontawesome.com/a076d05399.js"></script>
    <script>
        document.getElementById('togglePassword').addEventListener('click', function (e) {
            const password = document.getElementById('inputPassword');
            const type = password.getAttribute('type') === 'password' ? 'text' : 'password';
            password.setAttribute('type', type);
            this.classList.toggle('bi-eye');
        });

        document.getElementById('loginForm').addEventListener('submit', function (e) {
            // Aquí puedes añadir validaciones adicionales si es necesario
        });
    </script>
</body>
</html>
